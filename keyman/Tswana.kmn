store(&VERSION) '6.0'
store(&NAME) 'Tswana'
store(&COPYRIGHT) 'kasahorow'
store(&ETHNOLOGUECODE) 'tsn'

begin Unicode > use(main)

c Diacritics with combining class 220 (below base charater)
store(cc220_Key) U+002A U+003A U+005F
store(cc220_Char) U+0323 U+0324 U+0331

c Diacritics with combining class 230 (above base character)
store(cc230_Key) U+0060 U+0027 U+0036 U+007E U+002D U+0039 U+0038 U+0022 U+0030
store(cc230_Char) U+0300 U+0301 U+0302 U+0303 U+0304 U+0306 U+0307 U+0308 U+030C  

c do not work with deadkey
store(nonBase) "123457=!@#$%^&()+{[]}|;,<.>/?"

c all diacritics
store(diacriticKey) outs(cc220_Key) outs(cc230_Key)
store(diacriticChar) outs(cc220_Char) outs(cc230_Char)

group(main) using keys

+ "\" > dk(1) 
dk(1) + "\" > "\"
dk(1) + any(nonBase) > context beep

c suppress invalid key sequences for extended latin

c limit base characters that support multiple diacritics to maximum of two combining class 230 diacritics
any(cc230_Char) any(cc230_Char) dk(1) + any(cc230_Key) > context(1) context(2) beep
any(cc220_Char) any(cc230_Char) any(cc230_Char) dk(1) + any(cc230_Key) > context(1) context(2) context(3) beep

c limit base characters that support multiple diacritics to a single combining class 220 diacritic
any(cc220_Char) dk(1) + any(cc220_Key) > context(1) beep
any(cc220_Char) any(cc230_Char) dk(1) + any(cc220_Key) > context(1) context(2) beep
any(cc220_Char) any(cc230_Char) any(cc230_Char) dk(1) + any(cc220_Key) > context(1) context(2) context(3) beep

c prevent entering double diacritics
U+0323 dk(1) + "*" > context(1) beep
U+0324 dk(1) + ":" > context(1) beep
U+0331 dk(1) + "_" > context(1) beep
U+0300 dk(1) + "`" > context(1) beep  
U+0301 dk(1) + "'" > context(1) beep  
U+0302 dk(1) + "6" > context(1) beep  
U+0303 dk(1) + "~" > context(1) beep  
U+0304 dk(1) + "-" > context(1) beep  
U+0306 dk(1) + "9" > context(1) beep  
U+0307 dk(1) + "8" > context(1) beep  
U+0308 dk(1) + '"' > context(1) beep
U+030C dk(1) + "0" > context(1) beep  

c rules for processing extended latin characters   

c diacritic characters can be typed with dead keys
dk(1) + any(diacriticKey) > index(diacriticChar,2) use(reorder_diacritics) 

c diacritic marks can also be typed with right-alt shift key combination          
+ [SHIFT RALT K_8 ] > U+0323 use(reorder_diacritics)
+ [SHIFT RALT K_COLON] > U+0324 use(reorder_diacritics)
+ [SHIFT RALT K_HYPHEN] > U+0331 use(reorder_diacritics)
+ [SHIFT RALT K_BKQUOTE] > U+0303 use(reorder_diacritics)
+ [SHIFT RALT K_QUOTE] > U+0308 use(reorder_diacritics)
   
+ [RALT K_BKQUOTE] > U+0300 use(reorder_diacritics)
+ [RALT K_QUOTE] > U+0301 use(reorder_diacritics)
+ [RALT K_6] > U+0302 use(reorder_diacritics)
+ [RALT K_HYPHEN] > U+0304 use(reorder_diacritics)
+ [RALT K_9] > U+0306 use(reorder_diacritics)
+ [RALT K_8] > U+0307 use(reorder_diacritics)
+ [RALT K_0] > U+030C use(reorder_diacritics) 
  
group(reorder_diacritics)
any(cc230_Char) any(cc220_Char) > context(2) Context(1)
any(cc230_Char) any(cc230_Char) any(cc220_Char) > context(3) context(1) context(2) 

c EOF

