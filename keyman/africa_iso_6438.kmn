c africa_iso_6438_3.kmn
c 
c Africa ISO 4438 (Version 3)
c Unicode Normalization Form: NFD
c 
c v1: Original keyboard layout by Kashorow. Using AltGr key sequences to type extended Latin characters and diacritics
c v2: Keyboard layout by Kashorow, using deadkeys to type extended Latin characters and diacritics
c v3: Modifications to v.2 keyboard layout based on keyboard logic and documentation developed for the Open Road project.
c v4:
c 
c 
c Andrew Cunningham    2008-08-06
c andrewc AT vicnet.net.au
c lang.support AT gmail.com

store(&Version) "7.0"
c store(&Bitmap) ""
store(&Copyright) "© 2008 Kasahorow"
store(&Message) "Keyboard layout designed for ISO 6438 support by Kasahorow."
store(&Name) "Africa ISO 6438"

begin Unicode > use(main)

c Diacritics with combining class 220 (below base charater)
store(cc220_Key) U+002A U+003A U+005F
store(cc220_Char) U+0323 U+0324 U+0331

c Diacritics with combining class 230 (above base character)
store(cc230_Key) U+0060 U+0027 U+0036 U+007E U+002D U+0039 U+0038 U+0022 U+0030
store(cc230_Char) U+0300 U+0301 U+0302 U+0303 U+0304 U+0306 U+0307 U+0308 U+030C  

c Extended Latin characters
store(extChar_key_lower) "abcdefghijklmnopqrstuvwxyz[]"
store(extChar_key_upper) "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
store(extChar_char_lower) U+0263 U+0253 U+0188 U+0257 U+0259 U+0192 U+0260 U+0127 U+026a U+0288 U+0199 U+0292 U+0271 U+014b U+0275 U+01a5 U+025b U+027d U+0256 U+01ad U+028a U+028b U+0254 U+03c7 U+01b4 U+0283 U+0298 U+01c1
store(extChar_char_upper) U+0194 U+0181 U+0187 U+018a U+018e U+0191 U+0193 U+0126 U+0197 U+01ae U+0198 U+01b7 U+0271 U+014A U+019F U+01a4 U+0190 U+027d U+0189 U+01ac U+01b1 U+01b2 U+0186 U+03a7 U+01b3 U+01a9

c do not work with deadkey
store(nonBase) "123457=!@#$%^&()+{[]}|;,<.>/?"

c all diacritics
store(diacriticKey) outs(cc220_Key) outs(cc230_Key)
store(diacriticChar) outs(cc220_Char) outs(cc230_Char)

c all extended Latin characters and diacritics
store(allExt_keys) outs(extChar_key_lower) outs(extChar_key_upper) 
store(allExt_chars) outs(extChar_char_lower) outs(extChar_char_upper) 

group(main) using keys

+ "\" > dk(1) 
dk(1) + "\" > "\"
dk(1) + any(nonBase) > context beep

c suppress invalid key sequences for extended latin

c limit base characters that support multiple diacritics to maximum of two combining class 230 diacritics
any(cc230_Char) any(cc230_Char) dk(1) + any(cc230_Key) > context(1) context(2) beep
any(cc220_Char) any(cc230_Char) any(cc230_Char) dk(1) + any(cc230_Key) > context(1) context(2) context(3) beep

c limit base characters that support multiple diacritics to a single combining class 220 diacritic
any(cc220_Char) dk(1) + any(cc220_Key) > context(1) beep
any(cc220_Char) any(cc230_Char) dk(1) + any(cc220_Key) > context(1) context(2) beep
any(cc220_Char) any(cc230_Char) any(cc230_Char) dk(1) + any(cc220_Key) > context(1) context(2) context(3) beep

c prevent entering double diacritics
U+0323 dk(1) + "*" > context(1) beep
U+0324 dk(1) + ":" > context(1) beep
U+0331 dk(1) + "_" > context(1) beep
U+0300 dk(1) + "`" > context(1) beep  
U+0301 dk(1) + "'" > context(1) beep  
U+0302 dk(1) + "6" > context(1) beep  
U+0303 dk(1) + "~" > context(1) beep  
U+0304 dk(1) + "-" > context(1) beep  
U+0306 dk(1) + "9" > context(1) beep  
U+0307 dk(1) + "8" > context(1) beep  
U+0308 dk(1) + '"' > context(1) beep
U+030C dk(1) + "0" > context(1) beep  

c rules for processing extended latin characters

dk(1) + any(allExt_keys) > index(allExt_chars,2)

c diacritic characters can be typed with dead keys
dk(1) + any(diacriticKey) > index(diacriticChar,2) use(reorder_diacritics) 


c diacritic marks can also be typed with right-alt shift key combination          
+ [SHIFT RALT K_8 ] > U+0323 use(reorder_diacritics)
+ [SHIFT RALT K_COLON] > U+0324 use(reorder_diacritics)
+ [SHIFT RALT K_HYPHEN] > U+0331 use(reorder_diacritics)
+ [SHIFT RALT K_BKQUOTE] > U+0303 use(reorder_diacritics)
+ [SHIFT RALT K_QUOTE] > U+0308 use(reorder_diacritics)
   
+ [RALT K_BKQUOTE] > U+0300 use(reorder_diacritics)
+ [RALT K_QUOTE] > U+0301 use(reorder_diacritics)
+ [RALT K_6] > U+0302 use(reorder_diacritics)
+ [RALT K_HYPHEN] > U+0304 use(reorder_diacritics)
+ [RALT K_9] > U+0306 use(reorder_diacritics)
+ [RALT K_8] > U+0307 use(reorder_diacritics)
+ [RALT K_0] > U+030C use(reorder_diacritics) 

+ [RALT K_A] > U+0263
+ [RALT K_B] > U+0253  
+ [RALT K_C] > U+0188  
+ [RALT K_D] > U+0257  
+ [RALT K_E] > U+0259  
+ [RALT K_F] > U+0192  
+ [RALT K_G] > U+0260  
+ [RALT K_H] > U+0127  
+ [RALT K_I] > U+026a  
+ [RALT K_J] > U+0288
+ [RALT K_K] > U+0199
+ [RALT K_L] > U+0292
+ [RALT K_M] > U+0271
+ [RALT K_N] > U+014b
+ [RALT K_O] > U+0275
+ [RALT K_P] > U+01a5
+ [RALT K_Q] > U+025b 
+ [RALT K_R] > U+027d
+ [RALT K_S] > U+0256
+ [RALT K_T] > U+01ad
+ [RALT K_U] > U+028a
+ [RALT K_V] > U+028b
+ [RALT K_W] > U+0254
+ [RALT K_X] > U+03c7
+ [RALT K_Y] > U+01b4
+ [RALT K_Z] > U+0283
+ [RALT K_LBRKT] > U+0298
+ [RALT K_RBRKT] > U+01c1

+ [SHIFT RALT K_A] > U+0194
+ [SHIFT RALT K_B] > U+0181  
+ [SHIFT RALT K_C] > U+0187  
+ [SHIFT RALT K_D] > U+018a  
+ [SHIFT RALT K_E] > U+018e
+ [SHIFT RALT K_F] > U+0191  
+ [SHIFT RALT K_G] > U+0193  
+ [SHIFT RALT K_H] > U+0126  
+ [SHIFT RALT K_I] > U+0197  
+ [SHIFT RALT K_J] > U+01ae
+ [SHIFT RALT K_K] > U+0198
+ [SHIFT RALT K_L] > U+01b7
+ [SHIFT RALT K_M] > U+0271
+ [SHIFT RALT K_N] > U+014A
+ [SHIFT RALT K_O] > U+019F
+ [SHIFT RALT K_P] > U+01a4
+ [SHIFT RALT K_Q] > U+0190 
+ [SHIFT RALT K_R] > U+027d
+ [SHIFT RALT K_S] > U+0189
+ [SHIFT RALT K_T] > U+01ac
+ [SHIFT RALT K_U] > U+01b1
+ [SHIFT RALT K_V] > U+01b2
+ [SHIFT RALT K_W] > U+0186
+ [SHIFT RALT K_X] > U+03a7
+ [SHIFT RALT K_Y] > U+01b3
+ [SHIFT RALT K_Z] > U+01a9
    
group(reorder_diacritics)
any(cc230_Char) any(cc220_Char) > context(2) Context(1)
any(cc230_Char) any(cc230_Char) any(cc220_Char) > context(3) context(1) context(2) 

c EOF
